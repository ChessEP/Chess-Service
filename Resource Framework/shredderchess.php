<?phprequire('resourcewrapper.class.php');$wrapper = new ResourceWrapper('1.0', true);$wrapper->setDatabaseOpenings('http://www.shredderchess.com/online/playshredder/fetch.php?action=book&fen=$url_fen$&la=en&bookcode=p40', 'parserOpeningsToJSON');$wrapper->setDatabaseEndings('http://www.shredderchess.com/online/playshredder/fetch.php?action=egtb&fen=$url_fen$s', 'parserEndingsToJSON');$wrapper->rest();// Parse the text result from the distant website to get a JSON document.function parserOpeningsToJSON($text, $fen) {	$lines = explode("\n", $text);	$moves = array();	foreach($lines as $line) {		$infos = explode('#', $line);		if(count($infos)==14) {			$move = explode('...', $infos[0])[1];			$percentage = $infos[7]/1000;			$wins = round($infos[11]/$infos[6], 3);			$draws = round($infos[12]/$infos[6], 3);			$looses = round($infos[13]/$infos[6], 3);			$nb_play = (int)$infos[6];			$moves[] = array('move'=>$move, /*'value'=>$infos[4], 'percentage'=>$percentage, 'elo'=>$infos[8], 'performance'=>$infos[9],*/ 'probatowin'=>$wins, 'probatonull'=>$draws, /*'looses'=>$looses,*/ 'nb'=>$nb_play);		}	}	return json_encode($moves);}// Parse the text result from the distant website to get a JSON document.function parserEndingsToJSON($text, $fen) {	preg_match("/^[^ ]* ([bw]) .*$/", $fen, $matches);	if(count($matches)==2) {		$whiteToPlay = $matches[1]=='w';	}	$startForBlack = false;	$lines = explode("\n", $text);	$moves = array();	foreach($lines as $line) {		if($whiteToPlay && $line=='NEXTCOLOR') {			// End of the white move's suggestions. 			break;		} else if($line=='NEXTCOLOR') {			// Start of the black move's suggestions.			$startForBlack = true;			continue;		}		if(!$whiteToPlay && !$startForBlack) {			// It doesn't concern the black for now.			continue;		}				$infos = explode(': Lose in ', $line);		if(count($infos)==2) {			$move = convertToLAN($infos[0]);			if($move!=null) {				$moves[] = array('move'=>$move, 'result'=>-1, 'nb_moves'=>$infos[1]);			}		} else {			$infos = explode(': Win in ', $line);			$move = convertToLAN($infos[0]);			if(count($infos)==2) {				if($move!=null) {					$moves[] = array('move'=>$move, 'result'=>1, 'nb_moves'=>$infos[1]);				}			} else {				$infos = explode(': Draw in ', $line);				$move = convertToLAN($infos[0]);				if(count($infos)==2) {					if($move!=null) {						$moves[] = array('move'=>$move, 'result'=>0, 'nb_moves'=>$infos[1]);					}				}			}		}	}	return json_encode($moves);}// Convert the end move from shredderchess in a LAN.function convertToLAN($move) {	$positions = explode('-', $move);	if(count($positions)==2) {		return toBoardSquare($positions[0]).toBoardSquare($positions[1]);	}	return null;}// Convert a board square as a number to a board square with a digit and a letter.function toBoardSquare($number) {	$line = floor($number/8)+1;	$col = $number%8;	$letter = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h');	return $letter[$col].$line;}// Test with : 127.0.0.1/rest/endings/3r4$8$4k3$8$2K5$5r2$8$8 w - - 0 1?>